{
  "version": 3,
  "file": "voice.js",
  "sourceRoot": "../src/",
  "sources": [
    "voice.coffee"
  ],
  "names": [],
  "mappings": "AAAA;AAAA,MAAA,IAAA,EAAA;;EAAA,SAAA,GAAY,OAAA,CAAQ,mCAAR;;EACZ,IAAA,GAAO,QAAA,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,KAAlB,EAAyB,IAAzB,EAA+B,KAA/B,EAAsC,KAAtC,EAA6C,KAA7C,CAAA;IACL,GAAG,CAAC,cAAJ,CAAmB,GAAnB,EAAwB,IAAxB;IACA,GAAG,CAAC,uBAAJ,CAA4B,IAA5B,EAAkC,IAAA,GAAO,KAAzC;IACA,GAAG,CAAC,4BAAJ,CAAiC,IAAjC,EAAuC,IAAA,GAAO,KAAP,GAAe,KAAtD;IACA,GAAG,CAAC,4BAAJ,CAAiC,IAAjC,EAAuC,IAAA,GAAO,KAAP,GAAe,KAAf,GAAuB,KAA9D;WACA,GAAG,CAAC,4BAAJ,CAAiC,OAAjC,EAA0C,IAAA,GAAO,KAAP,GAAe,KAAf,GAAuB,KAAvB,GAA+B,KAAzE;EALK;;EAMP,MAAM,CAAC,OAAP,GACE;IAAA,KAAA,EAAO,QAAA,CAAC,KAAD,EAAQ,QAAR,CAAA;AACL,UAAA,eAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA;MAAA,IAAA,GAAO,KAAK,CAAC,kBAAN,CAAyB,SAAS,CAAC,IAAnC,EAAyC,SAAS,CAAC,IAAnD;MACP,eAAA,GAAkB;MAElB,KAAA,GAAQ,CAAA;AACR;MAAA,KAAA,UAAA;;QACE,KAAM,CAAA,GAAA,CAAN,GAAa,IAAI,MAAO,CAAA,IAAI,CAAC,IAAL,GAAY,MAAZ,CAAX,CAA+B,KAA/B,EAAsC,IAAI,CAAC,QAA3C;QACb,IAAsC,KAAM,CAAA,GAAA,CAAI,CAAC,KAAjD;UAAA,KAAM,CAAA,GAAA,CAAI,CAAC,KAAX,CAAiB,KAAK,CAAC,WAAvB,EAAA;;MAFF;aAIA;QAAA,IAAA,EAAM,QAAA,CAAC,SAAD,EAAY,MAAZ,EAAoB,GAApB,EAAyB,MAAzB,EAAiC,MAAjC,CAAA;AACJ,cAAA,QAAA,EAAA,IAAA,EAAA,IAAA,EAAA;UAAA,QAAA,GAAW,CAAA;AACX;UAAA,KAAA,WAAA;;YACE,QAAS,CAAA,GAAA,CAAT,GAAgB,IAAI,MAAO,CAAA,IAAI,CAAC,IAAL,GAAY,MAAZ,CAAX,CAA+B,KAA/B,EAAsC,IAAI,CAAC,QAA3C;UADlB;UAEA,IAAC,CAAC,QAAF,GAAa;UACb,IAAC,CAAC,UAAF,CAAa,SAAb,EAAwB,MAAxB,EAAgC,GAAhC,EAAqC,MAArC,EAA6C,MAA7C;AACA;AAAA;UAAA,KAAA,WAAA;;YACE,IAAwB,IAAI,CAAC,KAA7B;cAAA,IAAI,CAAC,KAAL,CAAW,SAAX,EAAA;;YACA,IAAgC,IAAI,CAAC,IAArC;2BAAA,IAAI,CAAC,IAAL,CAAU,SAAA,GAAY,MAAtB,GAAA;aAAA,MAAA;mCAAA;;UAFF,CAAA;;QANI,CAAN;QASA,OAAA,EAAS,IAAI,QAAJ,CAAa,QAAb,EAAuB,QAAQ,CAAC,OAAhC,CATT;QAUA,UAAA,EAAY,IAAI,QAAJ,CAAa,oCAAb,EAAmD,QAAQ,CAAC,UAA5D,CAVZ;QAWA,KAAA,EAAO,KAXP;QAYA,QAAA,EAAU;MAZV;IATK;EAAP;AARF",
  "sourcesContent": [
    "wavetable = require './wave-tables/dyna-ep-bright.json'\r\nadsr = (ctx, time, aVal, aTime, dVal, dTime, sTime, rTime) ->\r\n  ctx.setValueAtTime 0.0, time\r\n  ctx.linearRampToValueAtTime aVal, time + aTime\r\n  ctx.exponentialRampToValueAtTime dVal, time + aTime + dTime\r\n  ctx.exponentialRampToValueAtTime dVal, time + aTime + dTime + sTime\r\n  ctx.exponentialRampToValueAtTime 0.00001, time + aTime + dTime + sTime + rTime\r\nmodule.exports =\r\n  Voice: (audio, settings) ->\r\n    wave = audio.createPeriodicWave wavetable.real, wavetable.imag\r\n    currentInstance = null\r\n    \r\n    voice = {}\r\n    for key, node of settings.voice\r\n      voice[key] = new window[node.type + 'Node'] audio, node.settings\r\n      voice[key].start audio.currentTime if voice[key].start\r\n    \r\n    play: (startTime, noteNo, vel, length, global) -> \r\n      instance = {}\r\n      for key, node of settings.instance\r\n        instance[key] = new window[node.type + 'Node'] audio, node.settings\r\n      @.instance = instance\r\n      @.instanceFn startTime, noteNo, vel, length, global\r\n      for key, node of @.instance\r\n        node.start startTime if node.start\r\n        node.stop startTime + length if node.stop\r\n    voiceFn: new Function 'output', settings.voiceFn\r\n    instanceFn: new Function 'startTime,noteNo,vel,length,global', settings.instanceFn\r\n    voice: voice\r\n    instance: null"
  ]
}